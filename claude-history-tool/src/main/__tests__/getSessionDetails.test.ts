import { describe, it, expect } from 'vitest';
import { ChatMessage } from '../../types';
import { annotateInternalMessages } from '../getSessionDetails';

const SampleChat_WithTerminalControl: ChatMessage[] = [
  {
    parentUuid: null,
    isSidechain: false,
    userType: "external",
    cwd: "cwd",
    sessionId: "d99c45c5-13fd-459e-8b01-8365b2bd3434",
    version: "1.0.56",
    gitBranch: "main",
    type: "user",
    message: {
      role: "user",
      content: "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
    },
    isMeta: true,
    uuid: "6b96fd54-57ab-42d5-80e4-153889dc3d5a",
    timestamp: "2025-07-20T04:32:32.563Z"
  },
  {
    parentUuid: "6b96fd54-57ab-42d5-80e4-153889dc3d5a",
    isSidechain: false,
    userType: "external",
    cwd: "cwd",
    sessionId: "d99c45c5-13fd-459e-8b01-8365b2bd3434",
    version: "1.0.56",
    gitBranch: "main",
    type: "user",
    message: {
      role: "user",
      content: "<command-name>/clear</command-name>\n          <command-message>clear</command-message>\n          <command-args></command-args>"
    },
    uuid: "d03d0bb6-53c5-4762-91e2-5e1cf7d3307d",
    timestamp: "2025-07-20T05:00:51.573Z"
  },
  {
    parentUuid: "d03d0bb6-53c5-4762-91e2-5e1cf7d3307d",
    isSidechain: false,
    userType: "external",
    cwd: "cwd",
    sessionId: "d99c45c5-13fd-459e-8b01-8365b2bd3434",
    version: "1.0.56",
    gitBranch: "main",
    type: "user",
    message: {
      role: "user",
      content: "<local-command-stdout></local-command-stdout>"
    },
    uuid: "05df1946-1760-4a5d-8959-058177d15d97",
    timestamp: "2025-07-20T05:00:51.581Z"
  },
  {
    parentUuid: "05df1946-1760-4a5d-8959-058177d15d97",
    isSidechain: false,
    userType: "external",
    cwd: "cwd",
    sessionId: "d99c45c5-13fd-459e-8b01-8365b2bd3434",
    version: "1.0.56",
    gitBranch: "main",
    type: "user",
    message: {
      role: "user",
      content: "update the tsconfig.json so that String.startsWith is supported"
    },
    uuid: "regular-message-uuid",
    timestamp: "2025-07-20T05:01:00.000Z"
  }
];

const SampleChat: ChatMessage[] = [
  {
    parentUuid: null,
    isSidechain: false,
    userType: "external",
    cwd: "cwd",
    sessionId: "regular-session-id",
    version: "1.0.56",
    type: "user",
    message: {
      role: "user",
      content: "Hello, can you help me with this code?"
    },
    uuid: "regular-uuid-1",
    timestamp: "2025-07-20T04:32:32.563Z"
  },
  {
    parentUuid: "regular-uuid-1",
    isSidechain: false,
    userType: "external",
    cwd: "cwd",
    sessionId: "regular-session-id",
    version: "1.0.56",
    type: "assistant",
    message: {
      role: "assistant",
      content: "Of course! I'd be happy to help you with your code."
    },
    uuid: "regular-uuid-2",
    timestamp: "2025-07-20T04:33:00.000Z"
  }
];

describe('annotateInternalMessages', () => {
  it('should mark terminal control messages with internalMessageType', () => {
    // Make a copy of the sample data to avoid mutating the original
    const messages = JSON.parse(JSON.stringify(SampleChat_WithTerminalControl));
    
    annotateInternalMessages(messages);

    // Verify terminal control messages are marked correctly
    expect(messages).toHaveLength(4);
    expect(messages[0].internalMessageType).toBeUndefined(); // Caveat message (meta, not terminal control)
    expect(messages[1].internalMessageType).toBe('terminal_control'); // /clear command
    expect(messages[2].internalMessageType).toBe('terminal_control'); // command stdout
    expect(messages[3].internalMessageType).toBeUndefined(); // Regular message
  });

  it('should not mark regular messages as internal', () => {
    // Make a copy of the sample data to avoid mutating the original
    const messages = JSON.parse(JSON.stringify(SampleChat));
    
    annotateInternalMessages(messages);

    // Verify no messages are marked as internal
    expect(messages).toHaveLength(2);
    expect(messages[0].internalMessageType).toBeUndefined();
    expect(messages[1].internalMessageType).toBeUndefined();
  });

  it('should detect /clear command pattern', () => {
    const clearMessage: ChatMessage = {
      parentUuid: null,
      isSidechain: false,
      userType: "external",
      cwd: "/test",
      sessionId: "test-session",
      version: "1.0.0",
      type: "user",
      message: {
        role: "user",
        content: "<command-name>/clear</command-name>\n<command-message>clear</command-message>\n<command-args></command-args>"
      },
      uuid: "test-uuid",
      timestamp: "2025-07-20T00:00:00.000Z"
    };

    annotateInternalMessages([clearMessage]);

    expect(clearMessage.internalMessageType).toBe('terminal_control');
  });

  it('should detect local command stdout pattern', () => {
    const stdoutMessage: ChatMessage = {
      parentUuid: null,
      isSidechain: false,
      userType: "external",
      cwd: "/test",
      sessionId: "test-session",
      version: "1.0.0",
      type: "user",
      message: {
        role: "user",
        content: "<local-command-stdout>some output here</local-command-stdout>"
      },
      uuid: "test-uuid",
      timestamp: "2025-07-20T00:00:00.000Z"
    };

    annotateInternalMessages([stdoutMessage]);

    expect(stdoutMessage.internalMessageType).toBe('terminal_control');
  });

  it('should detect PreToolUse hook messages', () => {
    const hookMessage: ChatMessage = {
      parentUuid: "parent-uuid",
      isSidechain: false,
      userType: "external",
      cwd: "/test",
      sessionId: "test-session",
      version: "1.0.56",
      gitBranch: "main",
      type: "system",
      message: {
        role: "assistant",
        content: "\u001b[1mPreToolUse:Edit\u001b[22m [/Users/andy.fischer/ai-coding-tools/ts-rubberstamp/bin/ts-rubberstamp] completed successfully"
      },
      content: "\u001b[1mPreToolUse:Edit\u001b[22m [/Users/andy.fischer/ai-coding-tools/ts-rubberstamp/bin/ts-rubberstamp] completed successfully",
      isMeta: false,
      timestamp: "2025-07-20T04:46:32.040Z",
      uuid: "hook-uuid",
      toolUseID: "toolu_01QDwnBPegihfz51r1qm2tbg",
      level: "info"
    };

    annotateInternalMessages([hookMessage]);

    expect(hookMessage.internalMessageType).toBe('hook');
  });
});